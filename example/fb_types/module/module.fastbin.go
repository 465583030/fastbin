//
// THIS FILE IS GENERATED BY fastbin
// DO NOT MODIFY BY MANUAL
//
package module

import "github.com/funny/binary"

func (this *BaseStruct) MarshalBinary() (data []byte, err error) {
	var buf = binary.Buffer{Data: make([]byte, this.BinarySize())}
	this.MarshalWriter(&buf)
	return buf.Data, nil
}
func (this *BaseStruct) UnmarshalBinary(data []byte) error {
	this.UnmarshalPacket(data)
	return nil
}
func (this *BaseStruct) MarshalPacket(p []byte) {
	var buf = binary.Buffer{Data: p}
	this.MarshalWriter(&buf)
}
func (this *BaseStruct) UnmarshalPacket(p []byte) {
	var buf = binary.Buffer{Data: p}
	this.UnmarshalReader(&buf)
}
func (this *BaseStruct) BinarySize() (n int) {
	n = 8 + 8 + 2 + 2 + 4 + 4 + 8 + 8
	n += 2 + len(this.Field9)
	n += 2
	n += len(this.Field10) * 1
	n += 2
	n += len(this.Field11) * 8
	n += 2
	for i0 := 0; i0 < len(this.Field12); i0++ {
		n += 2 + len((this.Field12[i0]))
	}
	n += 2
	for i0 := 0; i0 < len(this.Field13); i0++ {
		n += 2
		n += len((this.Field13[i0])) * 1
	}
	n += 2
	for i0 := 0; i0 < len(this.Field14); i0++ {
		n += 2
		n += len((this.Field14[i0])) * 8
	}
	n += 2
	for i0 := 0; i0 < len(this.Field15); i0++ {
		n += 2
		for i1 := 0; i1 < len((this.Field15[i0])); i1++ {
			n += 2 + len(((this.Field15[i0])[i1]))
		}
	}
	n += 2
	n += len(this.Field16) * (8 + 8)
	n += 2
	for _, v0 := range this.Field17 {
		n += 8
		n += 2 + len(v0)
	}
	n += 2
	for _, v0 := range this.Field18 {
		n += 8
		n += 2
		n += len(v0) * 1
	}
	n += 2
	for k0, _ := range this.Field19 {
		n += 2 + len(k0)
		n += 8
	}
	n += 2
	for k0, v0 := range this.Field20 {
		n += 2 + len(k0)
		n += 2 + len(v0)
	}
	n += 2
	for k0, v0 := range this.Field21 {
		n += 2 + len(k0)
		n += 2
		n += len(v0) * 1
	}
	n += 2
	for _, v0 := range this.Field22 {
		n += 8
		n += 1
		if v0 != nil {
			n += v0.BinarySize()
		}
	}
	n += 2
	for k0, v0 := range this.Field23 {
		n += 2 + len(k0)
		n += 1
		if v0 != nil {
			n += v0.BinarySize()
		}
	}
	n += 1
	if this.Field24 != nil {
		n += this.Field24.BinarySize()
	}
	n += 1
	if this.Field25 != nil {
		n += 1
		if (*this.Field25) != nil {
			n += (*this.Field25).BinarySize()
		}
	}
	n += 2
	for i0 := 0; i0 < len(this.Field26); i0++ {
		n += 1
		if (this.Field26[i0]) != nil {
			n += (this.Field26[i0]).BinarySize()
		}
	}
	n += 2
	for i0 := 0; i0 < len(this.Field27); i0++ {
		n += 2
		for _, v1 := range this.Field27[i0] {
			n += 8
			n += 1
			if v1 != nil {
				n += v1.BinarySize()
			}
		}
	}
	n += 2
	for _, v0 := range this.Field28 {
		n += 8
		n += 2
		for i1 := 0; i1 < len(v0); i1++ {
			n += 1
			if (v0[i1]) != nil {
				n += (v0[i1]).BinarySize()
			}
		}
	}
	return n
}
func (this *BaseStruct) MarshalWriter(w binary.BinaryWriter) {
	w.WriteUint64LE(uint64(this.Field1))
	w.WriteUint64LE(uint64(this.Field2))
	w.WriteUint16LE(uint16(this.Field3))
	w.WriteUint16LE(uint16(this.Field4))
	w.WriteUint32LE(uint32(this.Field5))
	w.WriteUint32LE(uint32(this.Field6))
	w.WriteUint64LE(uint64(this.Field7))
	w.WriteUint64LE(uint64(this.Field8))
	w.WriteUint16LE(uint16(len(this.Field9)))
	w.WriteString(this.Field9)
	w.WriteUint16LE(uint16(len(this.Field10)))
	for i0 := 0; i0 < len(this.Field10); i0++ {
		w.WriteUint8(uint8((this.Field10[i0])))
	}
	w.WriteUint16LE(uint16(len(this.Field11)))
	for i0 := 0; i0 < len(this.Field11); i0++ {
		w.WriteUint64LE(uint64((this.Field11[i0])))
	}
	w.WriteUint16LE(uint16(len(this.Field12)))
	for i0 := 0; i0 < len(this.Field12); i0++ {
		w.WriteUint16LE(uint16(len((this.Field12[i0]))))
		w.WriteString((this.Field12[i0]))
	}
	w.WriteUint16LE(uint16(len(this.Field13)))
	for i0 := 0; i0 < len(this.Field13); i0++ {
		w.WriteUint16LE(uint16(len((this.Field13[i0]))))
		for i1 := 0; i1 < len((this.Field13[i0])); i1++ {
			w.WriteUint8(uint8(((this.Field13[i0])[i1])))
		}
	}
	w.WriteUint16LE(uint16(len(this.Field14)))
	for i0 := 0; i0 < len(this.Field14); i0++ {
		w.WriteUint16LE(uint16(len((this.Field14[i0]))))
		for i1 := 0; i1 < len((this.Field14[i0])); i1++ {
			w.WriteUint64LE(uint64(((this.Field14[i0])[i1])))
		}
	}
	w.WriteUint16LE(uint16(len(this.Field15)))
	for i0 := 0; i0 < len(this.Field15); i0++ {
		w.WriteUint16LE(uint16(len((this.Field15[i0]))))
		for i1 := 0; i1 < len((this.Field15[i0])); i1++ {
			w.WriteUint16LE(uint16(len(((this.Field15[i0])[i1]))))
			w.WriteString(((this.Field15[i0])[i1]))
		}
	}
	w.WriteUint16LE(uint16(len(this.Field16)))
	for k0, v0 := range this.Field16 {
		w.WriteUint64LE(uint64(k0))
		w.WriteUint64LE(uint64(v0))
	}
	w.WriteUint16LE(uint16(len(this.Field17)))
	for k0, v0 := range this.Field17 {
		w.WriteUint64LE(uint64(k0))
		w.WriteUint16LE(uint16(len(v0)))
		w.WriteString(v0)
	}
	w.WriteUint16LE(uint16(len(this.Field18)))
	for k0, v0 := range this.Field18 {
		w.WriteUint64LE(uint64(k0))
		w.WriteUint16LE(uint16(len(v0)))
		for i1 := 0; i1 < len(v0); i1++ {
			w.WriteUint8(uint8((v0[i1])))
		}
	}
	w.WriteUint16LE(uint16(len(this.Field19)))
	for k0, v0 := range this.Field19 {
		w.WriteUint16LE(uint16(len(k0)))
		w.WriteString(k0)
		w.WriteUint64LE(uint64(v0))
	}
	w.WriteUint16LE(uint16(len(this.Field20)))
	for k0, v0 := range this.Field20 {
		w.WriteUint16LE(uint16(len(k0)))
		w.WriteString(k0)
		w.WriteUint16LE(uint16(len(v0)))
		w.WriteString(v0)
	}
	w.WriteUint16LE(uint16(len(this.Field21)))
	for k0, v0 := range this.Field21 {
		w.WriteUint16LE(uint16(len(k0)))
		w.WriteString(k0)
		w.WriteUint16LE(uint16(len(v0)))
		for i1 := 0; i1 < len(v0); i1++ {
			w.WriteUint8(uint8((v0[i1])))
		}
	}
	w.WriteUint16LE(uint16(len(this.Field22)))
	for k0, v0 := range this.Field22 {
		w.WriteUint64LE(uint64(k0))
		if v0 == nil {
			w.WriteUint8(0)
		} else {
			w.WriteUint8(1)
			v0.MarshalWriter(w)
		}
	}
	w.WriteUint16LE(uint16(len(this.Field23)))
	for k0, v0 := range this.Field23 {
		w.WriteUint16LE(uint16(len(k0)))
		w.WriteString(k0)
		if v0 == nil {
			w.WriteUint8(0)
		} else {
			w.WriteUint8(1)
			v0.MarshalWriter(w)
		}
	}
	if this.Field24 == nil {
		w.WriteUint8(0)
	} else {
		w.WriteUint8(1)
		this.Field24.MarshalWriter(w)
	}
	if this.Field25 == nil {
		w.WriteUint8(0)
	} else {
		w.WriteUint8(1)
		if (*this.Field25) == nil {
			w.WriteUint8(0)
		} else {
			w.WriteUint8(1)
			(*this.Field25).MarshalWriter(w)
		}
	}
	w.WriteUint16LE(uint16(len(this.Field26)))
	for i0 := 0; i0 < len(this.Field26); i0++ {
		if (this.Field26[i0]) == nil {
			w.WriteUint8(0)
		} else {
			w.WriteUint8(1)
			(this.Field26[i0]).MarshalWriter(w)
		}
	}
	w.WriteUint16LE(uint16(len(this.Field27)))
	for i0 := 0; i0 < len(this.Field27); i0++ {
		w.WriteUint16LE(uint16(len((this.Field27[i0]))))
		for k1, v1 := range this.Field27[i0] {
			w.WriteUint64LE(uint64(k1))
			if v1 == nil {
				w.WriteUint8(0)
			} else {
				w.WriteUint8(1)
				v1.MarshalWriter(w)
			}
		}
	}
	w.WriteUint16LE(uint16(len(this.Field28)))
	for k0, v0 := range this.Field28 {
		w.WriteUint64LE(uint64(k0))
		w.WriteUint16LE(uint16(len(v0)))
		for i1 := 0; i1 < len(v0); i1++ {
			if (v0[i1]) == nil {
				w.WriteUint8(0)
			} else {
				w.WriteUint8(1)
				(v0[i1]).MarshalWriter(w)
			}
		}
	}
}
func (this *BaseStruct) UnmarshalReader(r binary.BinaryReader) {
	this.Field1 = int(r.ReadUint64LE())
	this.Field2 = uint(r.ReadUint64LE())
	this.Field3 = int16(r.ReadUint16LE())
	this.Field4 = uint16(r.ReadUint16LE())
	this.Field5 = int32(r.ReadUint32LE())
	this.Field6 = uint32(r.ReadUint32LE())
	this.Field7 = int64(r.ReadUint64LE())
	this.Field8 = uint64(r.ReadUint64LE())
	this.Field9 = string(r.ReadString(int(r.ReadUint16LE())))
	this.Field10 = []uint8(r.ReadBytes(int(r.ReadUint16LE())))
	{
		n := int(r.ReadUint16LE())
		this.Field11 = make([]int, n)
		for i0 := 0; i0 < n; i0++ {
			(this.Field11[i0]) = int(r.ReadUint64LE())
		}
	}
	{
		n := int(r.ReadUint16LE())
		this.Field12 = make([]string, n)
		for i0 := 0; i0 < n; i0++ {
			(this.Field12[i0]) = string(r.ReadString(int(r.ReadUint16LE())))
		}
	}
	{
		n := int(r.ReadUint16LE())
		this.Field13 = make([][]uint8, n)
		for i0 := 0; i0 < n; i0++ {
			(this.Field13[i0]) = []uint8(r.ReadBytes(int(r.ReadUint16LE())))
		}
	}
	{
		n := int(r.ReadUint16LE())
		this.Field14 = make([][]int, n)
		for i0 := 0; i0 < n; i0++ {
			{
				n := int(r.ReadUint16LE())
				(this.Field14[i0]) = make([]int, n)
				for i1 := 0; i1 < n; i1++ {
					((this.Field14[i0])[i1]) = int(r.ReadUint64LE())
				}
			}
		}
	}
	{
		n := int(r.ReadUint16LE())
		this.Field15 = make([][]string, n)
		for i0 := 0; i0 < n; i0++ {
			{
				n := int(r.ReadUint16LE())
				(this.Field15[i0]) = make([]string, n)
				for i1 := 0; i1 < n; i1++ {
					((this.Field15[i0])[i1]) = string(r.ReadString(int(r.ReadUint16LE())))
				}
			}
		}
	}
	{
		n := int(r.ReadUint16LE())
		this.Field16 = make(map[int]int, n)
		for i0 := 0; i0 < n; i0++ {
			k0 := int(r.ReadUint64LE())
			v0 := int(r.ReadUint64LE())
			(this.Field16[k0]) = v0
		}
	}
	{
		n := int(r.ReadUint16LE())
		this.Field17 = make(map[int]string, n)
		for i0 := 0; i0 < n; i0++ {
			k0 := int(r.ReadUint64LE())
			v0 := string(r.ReadString(int(r.ReadUint16LE())))
			(this.Field17[k0]) = v0
		}
	}
	{
		n := int(r.ReadUint16LE())
		this.Field18 = make(map[int][]uint8, n)
		for i0 := 0; i0 < n; i0++ {
			k0 := int(r.ReadUint64LE())
			var v0 []uint8
			v0 = []uint8(r.ReadBytes(int(r.ReadUint16LE())))
			(this.Field18[k0]) = v0
		}
	}
	{
		n := int(r.ReadUint16LE())
		this.Field19 = make(map[string]int, n)
		for i0 := 0; i0 < n; i0++ {
			k0 := string(r.ReadString(int(r.ReadUint16LE())))
			v0 := int(r.ReadUint64LE())
			(this.Field19[k0]) = v0
		}
	}
	{
		n := int(r.ReadUint16LE())
		this.Field20 = make(map[string]string, n)
		for i0 := 0; i0 < n; i0++ {
			k0 := string(r.ReadString(int(r.ReadUint16LE())))
			v0 := string(r.ReadString(int(r.ReadUint16LE())))
			(this.Field20[k0]) = v0
		}
	}
	{
		n := int(r.ReadUint16LE())
		this.Field21 = make(map[string][]uint8, n)
		for i0 := 0; i0 < n; i0++ {
			k0 := string(r.ReadString(int(r.ReadUint16LE())))
			var v0 []uint8
			v0 = []uint8(r.ReadBytes(int(r.ReadUint16LE())))
			(this.Field21[k0]) = v0
		}
	}
	{
		n := int(r.ReadUint16LE())
		this.Field22 = make(map[int]*BaseStruct, n)
		for i0 := 0; i0 < n; i0++ {
			k0 := int(r.ReadUint64LE())
			var v0 *BaseStruct
			if r.ReadUint8() == 1 {
				v0 = new(BaseStruct)
				v0.UnmarshalReader(r)
			}
			(this.Field22[k0]) = v0
		}
	}
	{
		n := int(r.ReadUint16LE())
		this.Field23 = make(map[string]*BaseStruct, n)
		for i0 := 0; i0 < n; i0++ {
			k0 := string(r.ReadString(int(r.ReadUint16LE())))
			var v0 *BaseStruct
			if r.ReadUint8() == 1 {
				v0 = new(BaseStruct)
				v0.UnmarshalReader(r)
			}
			(this.Field23[k0]) = v0
		}
	}
	if r.ReadUint8() == 1 {
		this.Field24 = new(BaseStruct)
		this.Field24.UnmarshalReader(r)
	}
	if r.ReadUint8() == 1 {
		this.Field25 = new(*BaseStruct)
		if r.ReadUint8() == 1 {
			(*this.Field25) = new(BaseStruct)
			(*this.Field25).UnmarshalReader(r)
		}
	}
	{
		n := int(r.ReadUint16LE())
		this.Field26 = make([]*BaseStruct, n)
		for i0 := 0; i0 < n; i0++ {
			if r.ReadUint8() == 1 {
				(this.Field26[i0]) = new(BaseStruct)
				(this.Field26[i0]).UnmarshalReader(r)
			}
		}
	}
	{
		n := int(r.ReadUint16LE())
		this.Field27 = make([]map[int]*BaseStruct, n)
		for i0 := 0; i0 < n; i0++ {
			{
				n := int(r.ReadUint16LE())
				(this.Field27[i0]) = make(map[int]*BaseStruct, n)
				for i1 := 0; i1 < n; i1++ {
					k1 := int(r.ReadUint64LE())
					var v1 *BaseStruct
					if r.ReadUint8() == 1 {
						v1 = new(BaseStruct)
						v1.UnmarshalReader(r)
					}
					((this.Field27[i0])[k1]) = v1
				}
			}
		}
	}
	{
		n := int(r.ReadUint16LE())
		this.Field28 = make(map[int][]*BaseStruct, n)
		for i0 := 0; i0 < n; i0++ {
			k0 := int(r.ReadUint64LE())
			var v0 []*BaseStruct
			{
				n := int(r.ReadUint16LE())
				v0 = make([]*BaseStruct, n)
				for i1 := 0; i1 < n; i1++ {
					if r.ReadUint8() == 1 {
						(v0[i1]) = new(BaseStruct)
						(v0[i1]).UnmarshalReader(r)
					}
				}
			}
			(this.Field28[k0]) = v0
		}
	}
}
func (this *Key) MarshalBinary() (data []byte, err error) {
	var buf = binary.Buffer{Data: make([]byte, this.BinarySize())}
	this.MarshalWriter(&buf)
	return buf.Data, nil
}
func (this *Key) UnmarshalBinary(data []byte) error {
	this.UnmarshalPacket(data)
	return nil
}
func (this *Key) MarshalPacket(p []byte) {
	var buf = binary.Buffer{Data: p}
	this.MarshalWriter(&buf)
}
func (this *Key) UnmarshalPacket(p []byte) {
	var buf = binary.Buffer{Data: p}
	this.UnmarshalReader(&buf)
}
func (this *Key) BinarySize() (n int) {
	n = 8 + 8
	return n
}
func (this *Key) MarshalWriter(w binary.BinaryWriter) {
	w.WriteUint64LE(uint64(this.A))
	w.WriteUint64LE(uint64(this.B))
}
func (this *Key) UnmarshalReader(r binary.BinaryReader) {
	this.A = int(r.ReadUint64LE())
	this.B = int(r.ReadUint64LE())
}
func (this *MyStruct) MarshalBinary() (data []byte, err error) {
	var buf = binary.Buffer{Data: make([]byte, this.BinarySize())}
	this.MarshalWriter(&buf)
	return buf.Data, nil
}
func (this *MyStruct) UnmarshalBinary(data []byte) error {
	this.UnmarshalPacket(data)
	return nil
}
func (this *MyStruct) MarshalPacket(p []byte) {
	var buf = binary.Buffer{Data: p}
	this.MarshalWriter(&buf)
}
func (this *MyStruct) UnmarshalPacket(p []byte) {
	var buf = binary.Buffer{Data: p}
	this.UnmarshalReader(&buf)
}
func (this *MyStruct) BinarySize() (n int) {

	n += this.Field1.BinarySize()
	n += 2
	for i0 := 0; i0 < len(this.Field2); i0++ {
		n += (this.Field2[i0]).BinarySize()
	}
	n += 2
	for k0, _ := range this.Field3 {
		n += k0.BinarySize()
		n += 8
	}
	return n
}
func (this *MyStruct) MarshalWriter(w binary.BinaryWriter) {
	this.Field1.MarshalWriter(w)
	w.WriteUint16LE(uint16(len(this.Field2)))
	for i0 := 0; i0 < len(this.Field2); i0++ {
		(this.Field2[i0]).MarshalWriter(w)
	}
	w.WriteUint16LE(uint16(len(this.Field3)))
	for k0, v0 := range this.Field3 {
		k0.MarshalWriter(w)
		w.WriteUint64LE(uint64(v0))
	}
}
func (this *MyStruct) UnmarshalReader(r binary.BinaryReader) {
	this.Field1.UnmarshalReader(r)
	{
		n := int(r.ReadUint16LE())
		this.Field2 = make([]BaseStruct, n)
		for i0 := 0; i0 < n; i0++ {
			(this.Field2[i0]).UnmarshalReader(r)
		}
	}
	{
		n := int(r.ReadUint16LE())
		this.Field3 = make(map[Key]int, n)
		for i0 := 0; i0 < n; i0++ {
			var k0 Key
			k0.UnmarshalReader(r)
			v0 := int(r.ReadUint64LE())
			(this.Field3[k0]) = v0
		}
	}
}
